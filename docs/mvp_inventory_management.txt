# 아르노 코스메틱 재고·판매 관리 시스템 MVP PRD
## Minimum Viable Product Requirements Document

**문서 버전:** MVP 1.0  
**작성일:** 2025년 10월 28일  
**개발 기간:** 2개월  
**목표:** 핵심 재고 흐름 구현 (공장 매입 → 본사 → 지사 → 판매)

---

## 1. MVP 목표

### 1.1 핵심 가치 제안
"공장에서 매입한 제품이 지사에서 판매될 때까지의 재고 흐름을 정확하게 추적하고, **원가 기반 자동 가격 계산**으로 지사별 최적 판매가를 제시한다."

### 1.2 MVP 범위
```
생산공장 → [본사 입고] → 본사 재고 → [본사 출고] → 지사 재고 → [판매] → 매출

핵심: 매입단가 + Transfer 비용 + 마진 + 환율 → 지사별 판매가 자동 계산
```

### 1.3 간소화된 가격 계산 공식
```
지사별 원가 = (매입단가 + Transfer 비용) / 환율

판매가 = 지사별 원가 / (1 - 본사마진% - 지사마진%)

예시:
- 매입가: 5,000원
- Transfer: 500원
- 환율: 1원 = 18 VND
- 본사마진: 10%
- 지사마진: 30%

→ 원가 = (5,000 + 500) / 18 = 305.56 VND
→ 판매가 = 305.56 / (1 - 0.40) = 509.27 VND
→ 최종: 500 VND (반올림)
```

### 1.4 제외 항목 (Post-MVP)
- ❌ 복잡한 품질 검사 프로세스 (간단한 승인만)
- ❌ 성분 및 인증 관리
- ❌ 프로모션 및 할인
- ❌ 번들/세트 상품
- ❌ 샘플 관리
- ❌ 반품 처리
- ❌ 바코드 스캔
- ❌ 모바일 앱
- ❌ 엑셀 대량 업로드
- ❌ 고급 리포트 (기본 리포트만)
- ❌ 환율 자동 업데이트 (수동 입력)
- ❌ 고급 가격 시뮬레이터 (기본 계산 엔진은 포함)
- ❌ 상세 원가 구성 (라벨링, 인증, 샘플 비용 등)

---

## 2. MVP 기능 목록

### 2.1 사용자 및 권한
- ✅ 로그인/로그아웃
- ✅ 2가지 역할만
  - **본사 관리자**: 모든 기능
  - **지사 관리자**: 해당 지사 데이터만

### 2.2 기초 데이터
- ✅ 공급처(공장) 등록 (간단한 정보만)
- ✅ 제품 등록 (기본 정보만)
  - SKU, 이름, 카테고리, 단위
  - 유통기한 (일 단위)
- ✅ 지사 등록 (베트남, 중국)

### 2.3 발주 및 본사 입고
- ✅ 발주서 생성 (제품, 수량, 단가)
- ✅ 발주서 승인
- ✅ 본사 입고 처리
  - 수량 확인
  - 간단한 승인 (합격/불합격)
  - 로트번호, 제조일, 유통기한 입력
  - **본사 재고 자동 증가**

### 2.4 재고 관리
- ✅ 본사 재고 조회 (제품별, 로트별)
- ✅ 지사 재고 조회 (제품별, 로트별)
- ✅ 본사 → 지사 출고
  - 제품, 수량, 목적지 선택
  - **본사 재고 차감, 지사 재고 증가**
- ✅ FIFO 재고 차감 (유통기한 빠른 것부터)

### 2.5 가격 관리 (간소화된 원가 기반)
- ✅ 제품별 매입 단가 입력 (발주서에서 자동 반영)
- ✅ 지사별 판매가 자동 계산
  - **입력 항목**:
    - 본사 마진율 (%)
    - 지사 마진율 (%)
    - 환율 (KRW → VND, KRW → CNY)
    - Transfer 비용 (운송비, 관세 등 총합)
  - **자동 계산 공식**:
    ```
    지사별 원가 = (매입단가 + Transfer 비용) / 환율
    판매가 = 지사별 원가 / (1 - 본사마진% - 지사마진%)
    ```
- ✅ 계산된 가격 확인 및 수동 조정 가능

### 2.6 판매 관리
- ✅ 지사에서 일별 판매 입력
  - 날짜, 제품, 수량
  - **지사 재고 자동 차감**
- ✅ 판매 내역 조회

### 2.7 대시보드 및 리포트
- ✅ 간단한 대시보드
  - 오늘 매출
  - 본사/지사 재고 현황
- ✅ 기본 리포트 (테이블 형태)
  - 일별 판매 현황 (지사별)
  - 재고 현황 (본사/지사별)
  - 입출고 이력

---

## 3. 데이터 모델 (최소화)

### 3.1 핵심 테이블만 (10개)

```sql
-- 1. 사용자
users
  - id, email, password_hash, name, role ('HQ_Admin', 'Branch_Manager')
  - location_id (지사 관리자만 해당)

-- 2. 지사
locations
  - id, name, location_type ('HQ', 'Branch')
  - country_code, currency

-- 3. 공급처
suppliers
  - id, name, contact_person, phone, email

-- 4. 제품
products
  - id, sku, name, category, unit
  - shelf_life_days (유통기한)
  - purchase_price (최근 매입단가 - 참고용)

-- 5. 발주서
purchase_orders
  - id, po_no, supplier_id, order_date
  - status ('Draft', 'Approved', 'Received')
  - total_amount

-- 6. 발주서 상세
purchase_order_items
  - id, po_id, product_id, qty, unit_price

-- 7. 재고 (본사 + 지사 통합)
stock_batches
  - id, product_id, location_id
  - batch_no, qty_on_hand
  - manufactured_date, expiry_date
  - unit_cost (해당 로트의 매입 단가)

-- 8. 가격 설정 (신규 추가)
pricing_configs
  - id, product_id, from_location_id, to_location_id
  - purchase_price (매입단가)
  - transfer_cost (운송비, 관세 등 총합)
  - hq_margin_percent (본사 마진%)
  - branch_margin_percent (지사 마진%)
  - exchange_rate (환율)
  - calculated_price (자동 계산된 판매가)
  - final_price (최종 판매가 - 수동 조정 가능)
  - currency
  - updated_at

-- 9. 판매
sales
  - id, location_id, product_id, batch_id
  - sale_date, qty, unit_price, total_amount
  - currency

-- 10. 환율 (간단하게)
exchange_rates
  - id, from_currency, to_currency, rate
  - updated_at
```

### 3.2 제외된 테이블
- ❌ 재고 이동 추적 (transfers) → 직접 stock_batches 조작
- ❌ 성분, 인증, 이미지
- ❌ 프로모션, 번들
- ❌ 반품, 샘플
- ❌ 상세 원가 구성 (cost_components) → pricing_configs로 단순화
- ❌ 감사 로그 (향후 추가)

---

## 4. MVP 업무 흐름

### 4.1 본사 관리자

#### 플로우 1: 제품 등록
```
1. 제품 추가 버튼 클릭
2. 정보 입력
   - SKU: "ARN-001"
   - 이름: "모이스처 크림 50ml"
   - 카테고리: "스킨케어"
   - 단위: "EA"
   - 유통기한: 730일 (2년)
3. 저장
```

#### 플로우 2: 공장에서 매입 (발주 → 입고)
```
1. 발주서 생성
   - 공급처 선택
   - 제품 선택: "모이스처 크림 50ml"
   - 수량: 1000개
   - 단가: 5,000원
   - 저장 (상태: Draft)

2. 발주서 승인
   - 발주서 목록에서 선택
   - "승인" 버튼 (상태: Approved)

3. 본사 입고 처리
   - "입고 처리" 버튼
   - 실제 입고 수량 확인: 1000개
   - 로트 정보 입력
     * 로트번호: "LOT-20251028-001"
     * 제조일: 2025-10-28
     * 유통기한: 2027-10-27 (자동 계산)
   - 승인 (합격/불합격 선택)
   - 저장
   → 본사 재고 1000개 증가
```

#### 플로우 3: 지사로 출고
```
1. 출고 버튼 클릭
2. 정보 입력
   - 출발지: 한국 본사
   - 목적지: 베트남 지사
   - 제품: "모이스처 크림 50ml"
   - 수량: 300개
3. 저장
   → 본사 재고 300개 차감 (LOT-20251028-001에서 차감)
   → 베트남 지사 재고 300개 증가
```

#### 플로우 4: 판매가 계산 및 설정 (지사별)
```
1. 가격 관리 메뉴
2. 제품 선택: "모이스처 크림 50ml"
3. 베트남 지사 가격 설정 클릭
4. 정보 입력
   - 매입단가: 5,000원 (자동 입력 - 최근 발주 기준)
   - Transfer 비용: 500원 (운송비, 관세 등)
   - 본사 마진: 10%
   - 지사 마진: 30%
   - 환율: 1 KRW = 18 VND (수동 입력 또는 저장된 환율)
5. "계산" 버튼 클릭
   → 자동 계산:
     베트남 원가 = (5,000 + 500) / 18 = 305.56 VND (단위당)
     판매가 = 305.56 / (1 - 0.10 - 0.30) = 509.27 VND
     → 반올림: 510 VND 또는 500 VND (정책에 따라)
6. 계산 결과 확인
   - 계산된 가격: 509 VND
   - 수동 조정 가능: 500 VND (깔끔한 숫자로)
7. 저장
   → 베트남 판매가: 500 VND

8. 중국 지사도 동일하게 반복
   - 환율: 1 KRW = 0.0052 CNY
   - 계산: (5,000 + 500) / 0.0052 / 0.6 = 1,762 CNY
   - 수동 조정: 1,800 CNY
```

### 4.2 지사 관리자 (베트남)

#### 플로우 5: 재고 확인
```
1. 재고 메뉴 클릭
2. 현재 재고 확인
   - "모이스처 크림 50ml": 300개
   - 로트: LOT-20251028-001
   - 유통기한: 2027-10-27
```

#### 플로우 6: 판매 입력
```
1. 판매 입력 버튼
2. 정보 입력
   - 날짜: 2025-10-28
   - 제품: "모이스처 크림 50ml"
   - 수량: 10개
   - 단가: 200,000 VND (자동 입력)
   - 총액: 2,000,000 VND (자동 계산)
3. 저장
   → 베트남 지사 재고 10개 차감
   → 판매 기록 저장
```

#### 플로우 7: 판매 내역 조회
```
1. 판매 내역 메뉴
2. 기간 선택: 오늘
3. 목록 확인
   - 날짜, 제품, 수량, 단가, 총액
```

---

## 5. 화면 설계 (MVP 최소화)

### 5.1 공통
- **로그인 화면**
- **상단 네비게이션**: 로고, 메뉴, 로그아웃

### 5.2 본사 관리자 화면 (6개)

#### 1) 대시보드
```
┌─────────────────────────────────────────┐
│  오늘 매출: 15,000,000 VND + 5,000 CNY  │
├─────────────────────────────────────────┤
│  본사 재고 가치: 5,000,000 KRW          │
│  베트남 지사 재고: 290개                 │
│  중국 지사 재고: 150개                   │
└─────────────────────────────────────────┘
```

#### 2) 제품 관리
- **목록**: SKU, 이름, 카테고리, 유통기한
- **추가/편집**: 폼 (SKU, 이름, 카테고리, 단위, 유통기한)

#### 3) 발주 관리
- **발주서 목록**: 발주번호, 공급처, 날짜, 상태, 금액
- **발주서 생성**: 공급처, 제품, 수량, 단가 입력
- **입고 처리**: 수량 확인, 로트 정보, 승인

#### 4) 재고 현황
- **테이블**: 제품, 본사 수량, 베트남 수량, 중국 수량, 로트, 유통기한

#### 5) 출고 관리
- **출고 폼**: 출발지(본사 고정), 목적지(지사 선택), 제품, 수량

#### 6) 가격 관리
**제품 목록 + 지사별 가격 설정**

```
┌────────────────────────────────────────────────────────┐
│ 제품: 모이스처 크림 50ml                                 │
├────────────────────────────────────────────────────────┤
│ 베트남 지사 가격 설정                                     │
│                                                        │
│ 매입단가 (KRW):    [5,000] (자동)                       │
│ Transfer 비용:     [500]   원 (운송, 관세 등)           │
│ 본사 마진:         [10]    %                           │
│ 지사 마진:         [30]    %                           │
│ 환율 (KRW→VND):    [18.0]                             │
│                                                        │
│ [계산하기]                                              │
│                                                        │
│ ─────── 계산 결과 ───────                              │
│ 베트남 원가:       305.56 VND                          │
│ 계산된 판매가:     509.27 VND                          │
│                                                        │
│ 최종 판매가:       [500]   VND  ← 수동 조정 가능         │
│                                                        │
│ [저장]                                                 │
└────────────────────────────────────────────────────────┘

테이블: 제품별 가격 요약
┌─────────┬─────────┬─────────┬─────────┬─────────┐
│ 제품    │ 매입가  │ VN 가격 │ CN 가격 │ 액션    │
├─────────┼─────────┼─────────┼─────────┼─────────┤
│ 크림    │ 5,000원 │ 500 VND │ 1,800¥  │ [편집]  │
└─────────┴─────────┴─────────┴─────────┴─────────┘
```

### 5.3 지사 관리자 화면 (3개)

#### 1) 재고 현황
- **테이블**: 제품, 수량, 로트, 유통기한

#### 2) 판매 입력
- **폼**: 날짜, 제품, 수량 입력 (단가 자동, 총액 자동 계산)

#### 3) 판매 내역
- **테이블**: 날짜, 제품, 수량, 단가, 총액
- **필터**: 날짜 범위

---

## 6. API 설계 (MVP 최소화)

### 6.1 인증
```http
POST /api/v1/auth/login
POST /api/v1/auth/logout
```

### 6.2 제품
```http
GET /api/v1/products
GET /api/v1/products/{id}
POST /api/v1/products
PUT /api/v1/products/{id}
```

### 6.3 공급처
```http
GET /api/v1/suppliers
POST /api/v1/suppliers
```

### 6.4 발주
```http
GET /api/v1/purchase-orders
POST /api/v1/purchase-orders
PUT /api/v1/purchase-orders/{id}/approve
POST /api/v1/purchase-orders/{id}/receive
  Request:
  {
    "items": [
      {
        "product_id": 1,
        "received_qty": 1000,
        "batch_no": "LOT-20251028-001",
        "manufactured_date": "2025-10-28",
        "unit_cost": 5000
      }
    ]
  }
  → stock_batches에 본사 재고 생성
```

### 6.5 재고
```http
GET /api/v1/stock?location_id=1
  Response: 본사 또는 지사 재고 목록

POST /api/v1/stock/transfer
  Request:
  {
    "from_location_id": 1,
    "to_location_id": 2,
    "product_id": 1,
    "qty": 300
  }
  → FIFO로 본사 재고 차감, 지사 재고 증가
```

### 6.6 판매
```http
GET /api/v1/sales?location_id=2&date_from=2025-10-28
POST /api/v1/sales
  Request:
  {
    "location_id": 2,
    "product_id": 1,
    "qty": 10,
    "sale_date": "2025-10-28"
  }
  로직:
  1. pricing_configs에서 해당 지사의 final_price 조회
  2. total_amount = qty × final_price 계산
  3. FIFO로 지사 재고 차감
  4. 판매 기록 저장
  
  Response:
  {
    "id": 123,
    "unit_price": 500,
    "total_amount": 5000,
    "currency": "VND"
  }
```

### 6.7 가격 및 환율
```http
GET /api/v1/exchange-rates
  Response:
  [
    { "from": "KRW", "to": "VND", "rate": 18.0 },
    { "from": "KRW", "to": "CNY", "rate": 0.0052 }
  ]

POST /api/v1/exchange-rates
  Request:
  {
    "from": "KRW",
    "to": "VND",
    "rate": 18.0
  }

GET /api/v1/pricing-configs?product_id=1
  Response:
  [
    {
      "product_id": 1,
      "to_location_id": 2, // 베트남
      "purchase_price": 5000,
      "transfer_cost": 500,
      "hq_margin_percent": 10,
      "branch_margin_percent": 30,
      "exchange_rate": 18.0,
      "calculated_price": 509.27,
      "final_price": 500,
      "currency": "VND"
    }
  ]

POST /api/v1/pricing-configs/calculate
  Request:
  {
    "product_id": 1,
    "to_location_id": 2,
    "purchase_price": 5000,
    "transfer_cost": 500,
    "hq_margin_percent": 10,
    "branch_margin_percent": 30,
    "exchange_rate": 18.0
  }
  Response:
  {
    "local_cost": 305.56,
    "calculated_price": 509.27,
    "suggested_price": 500  // 반올림
  }

POST /api/v1/pricing-configs
  Request:
  {
    "product_id": 1,
    "to_location_id": 2,
    "purchase_price": 5000,
    "transfer_cost": 500,
    "hq_margin_percent": 10,
    "branch_margin_percent": 30,
    "exchange_rate": 18.0,
    "final_price": 500  // 수동 조정된 최종가
  }
```

### 6.8 대시보드
```http
GET /api/v1/dashboard
  Response:
  {
    "today_sales": {
      "VND": 15000000,
      "CNY": 5000
    },
    "hq_stock_value": 5000000,
    "branch_stock": {
      "VN": 290,
      "CN": 150
    }
  }
```

---

## 7. 기술 스택 (간소화)

### 7.1 백엔드
- **언어**: Node.js + TypeScript 또는 Python
- **프레임워크**: Express.js 또는 FastAPI (간단한 것)
- **데이터베이스**: PostgreSQL
- **인증**: JWT (단순)

### 7.2 프론트엔드
- **프레임워크**: React + TypeScript
- **UI 라이브러리**: Tailwind CSS + shadcn/ui (빠른 개발)
- **상태 관리**: React Context API (간단한 것)
- **폼**: React Hook Form

### 7.3 배포
- **백엔드**: Heroku 또는 Railway (간단한 배포)
- **프론트엔드**: Vercel 또는 Netlify
- **데이터베이스**: Heroku PostgreSQL 또는 Supabase

---

## 8. 개발 일정 (2개월)

### Week 1-2: 기초 설정 및 인증
- 프로젝트 세팅
- DB 스키마 생성
- 로그인/로그아웃
- 기초 데이터 CRUD (사용자, 지사, 공급처, 제품)

### Week 3-4: 발주 및 본사 입고
- 발주서 생성/승인
- 본사 입고 처리
- 본사 재고 자동 증가

### Week 5-6: 재고 이동, 가격 계산 및 판매
- 본사 → 지사 출고 (재고 이동)
- 환율 관리
- 가격 계산 엔진 (원가 기반)
- 지사별 가격 설정 화면
- 판매 입력
- 재고 자동 차감 (FIFO)

### Week 7: 대시보드 및 리포트
- 대시보드 구현
- 기본 리포트 (재고, 판매)

### Week 8: 테스트 및 배포
- 통합 테스트
- 버그 수정
- 배포 및 사용자 교육

---

## 9. MVP 성공 기준

### 9.1 필수 시나리오 완료
- ✅ 공장 발주 → 본사 입고 → 본사 재고 증가
- ✅ 본사 → 지사 출고 → 지사 재고 증가, 본사 재고 차감
- ✅ 지사 판매 입력 → 지사 재고 차감
- ✅ 대시보드에서 실시간 재고/매출 확인

### 9.2 데이터 정확성
- ✅ 재고 수량이 입출고 이력과 일치
- ✅ FIFO 적용 (유통기한 빠른 것부터 차감)
- ✅ 판매 총액이 수량 × 단가와 일치
- ✅ 가격 계산 공식 정확성
  ```
  검증: (매입가 + Transfer 비용) / 환율 / (1 - 본사마진% - 지사마진%) = 계산된 가격
  ```
- ✅ 지사별로 설정된 판매가가 판매 시 정확히 적용

### 9.3 성능
- ✅ API 응답 시간 < 500ms (복잡한 쿼리 < 1초)
- ✅ 동시 사용자 10명 안정 처리

---

## 10. Post-MVP 로드맵

### Phase 2 (1개월)
- 엑셀 업로드 (판매 데이터)
- 반품 처리
- 상세 리포트 (지사별 P&L)
- 감사 로그

### Phase 3 (1개월)
- 프로모션 및 할인
- 번들 상품
- 환율 자동 업데이트
- 가격 시뮬레이터

### Phase 4 (2개월)
- 성분 및 인증 관리
- 품질 검사 상세 프로세스
- 바코드 스캔
- 모바일 앱

### Phase 5 (장기)
- 고급 원가 계산
- AI 수요 예측
- 외부 시스템 연동 (회계, ERP)

---

## 11. MVP 제약사항 및 가정

### 11.1 가정
- 사용자는 5명 이하 (본사 2명, 지사 각 1명)
- 제품은 50개 이하
- 일 판매 건수 100건 이하
- 인터넷 연결 항상 가능
- 영어 UI만 (다국어 Post-MVP)

### 11.2 제약사항
- 모바일 최적화 없음 (PC 웹만)
- 오프라인 모드 없음
- 대용량 데이터 처리 최적화 없음
- 고급 보안 기능 없음 (기본 인증만)

### 11.3 알려진 제한사항
- 동시에 같은 재고를 편집하면 충돌 가능 (락 없음)
- 가격 변경 이력 추적 없음
- 환율은 수동 입력 (자동 업데이트 없음, 하지만 저장하여 재사용)
- Transfer 비용은 제품당 평균 비용 (실제 운송비와 다를 수 있음)

---

## 12. 체크리스트

### 개발 전
- [ ] DB 스키마 확정
- [ ] API 명세 확정
- [ ] 화면 와이어프레임 승인
- [ ] 개발 환경 세팅

### 개발 중
- [ ] 주간 데모 (매주 금요일)
- [ ] 핵심 시나리오 테스트
- [ ] 코드 리뷰

### 배포 전
- [ ] 전체 시나리오 E2E 테스트
- [ ] 데이터 정확성 검증
- [ ] 성능 테스트
- [ ] 사용자 교육 자료 준비

### 배포 후
- [ ] 사용자 피드백 수집
- [ ] 버그 모니터링
- [ ] Phase 2 계획

---

## 13. 연락처

- **프로젝트 매니저**: [이름], [이메일]
- **개발 리드**: [이름], [이메일]
- **사용자 대표 (본사)**: [이름], [이메일]
- **사용자 대표 (베트남)**: [이름], [이메일]
- **사용자 대표 (중국)**: [이름], [이메일]

---

**승인**:
- [ ] 프로젝트 스폰서
- [ ] 제품 책임자
- [ ] 개발 리드

**다음 단계**: 개발 착수 → Week 1 시작